<?php


/**
 * FILELOGIX LOGIN CLASS
 *  
 * @author Wes Benwick
 * @link http://www.filelogix.com
 * @license Part of Filelogix usage license
 *
 * Notes: This class creates the form for any login box or login page either as Javascript or HTML output
 * 
 */ 

namespace FLX\Controllers;
 
class login
{  
  
    // Will store database connection here
	private $db;
	private $connID;
	private $sessionID;
	private $username;
	private $view = "login";
	private $auth;
	private $vars = array();
	private $lists;
	private $action;

	/**
  	 * Create instance, load current info based on session info
  	 *
  	 * @return bool
  	 */
	
	public function __construct($db) {
	  $this->db = $db;
	  
	  $this->sessionID = $sessionID;
	  $this->username = $username;
	  
	  $this->auth = new \auth($this->db);
	  
	  $this->lists = new \lists($this->db);
	  
	  $this->auth->logout();
	 
//	  session_regenerate_id(true);

	  		
//	  $this->db->insert("FLX_CONNECTIONS", array("type"=>$this->type, "sessionID"=>$this->sessionID, "httpHost"=>$this->httpHost, "ipAddress"=>$this->ipAddress, "userAgent"=>$this->userAgent, "fingerprint"=>$this->fingerprint, "requestURI"=>$this->requestURI, "_server"=>print_r($_SERVER,1), "_get"=>print_r($_GET,1), "_post"=>print_r($_POST,1)));	

//	  error_log($this->db->lastQuery());
	}
	
	/**
  	 * Opens the controller - responsible for authentication and loading defaults
  	 *
  	 * @return bool true if success, false if failure
  	 */
	
	public function open() {
/*
	  $this->users=$this->db->query("select * from connections");
	  foreach ($this->users as $row) {
		  $this->userID = $row['userID'];
		  $this->username = $row['username'];
		  $this->emailAddress = $row['emailAddress'];
      }
*/		
	}
	
	
	public function go() {

		if ($this->auth->login($_POST["username"], $_POST["password"])) {	
//			session_regenerate_id(true);
			error_log("Authenticated. " . $_POST["username"]);		
			$this->action = "go";
			$this->view = "home";
			return true;
		}
		
		else {
			error_log("Not Authenticated. " . $_POST["username"]);		
			$this->action = "";
			$this->vars["alertError"]=true;
			$this->vars["errorMsg"]="The username and password entered are incorrect.";
			$this->vars["username"]=$_POST["username"];
			$this->view = "login";
			return true;
		}
	}
	
	/**
  	 * Loads the controller, handles any templating and pre-display logic for the requested view
  	 *
  	 * @return bool
  	 */
	
	public function load($view) {


	}

	public function view() {
		
		return $this->view;
	}
	
	public function transfer() {
	
		if ($this->action == "go") {
			if ($_SESSION["returnURL"]) {
				$returnURL = $_SESSION["returnURL"];
				error_log("Transferring to " . $returnURL);
//				unset($_SESSION["returnURL"]);
				$cookieStr = "";
				if (!isset($_SERVER["HTTP_COOKIE"])) {
					$cookieStr = "?PHPSESSID=" . session_id();
				}
				return $returnURL . $cookieStr;
			}
			else {
				error_log("Transferring to home/");
				return "/home";
			}
		}
		else {
			return false;
		}
		
	}

	public function isValid($activationCode, $userKey) {
				
		$activationCodeStr = $this->db->quote($activationCode);
		$userKeyStr = $this->db->quote($userKey);
		
		$r=$this->db->query("select * from FLX_USERS where activationCode = $activationCodeStr and userKey = $userKeyStr and isActive is FALSE and isSuspended is FALSE");
		 
		$results=$r->fetch(\PDO::FETCH_ASSOC);

		error_log("isValid: " . $this->db->lastQuery());

		if ($results["userID"]) {
			return $results["userID"];
		}
		else {
			return intval("-" . $results["userID"]);
		}
		
		return false;
				
	}

	public function forgot($params) {
	  
			if ($_POST["username"] != "") {
				$this->view="forgot";
				$this->vars["alertError"]=true;
				$this->vars["errorMsg"]="Password has been reset, please check your email.";
				$random = new \random(6,6);
				$randomStr = $random->token(6);
				$users = new \users($this->db);
				if ($users->resetPasswordByEmailAddress($_POST["username"],$randomStr)) {
										$email = new \FLX\mail($this->db);
								  		$email->from("support@bluhorn.com");
								  		$email->to($_POST["username"]);
								  		$email->bcc("wbenwick@filelogix.net");
								  		$email->subject("Your password reset for BluHorn");
								  		//$email->text("This message was generated by FileLogix");
								  		//$email->html("<html><head></head><body>This message was generated by FileLogix</body></html>");
								  		
								  		$data = array();
								  		$data["resetCode"] = $randomStr;
								  		$data["username"] = $_POST["username"];
								  		$data["id"] = md5($randomStr);
								  		
								  		$email->htmlByTemplate("MAIL_FORGOT", array("email" => $data));
								  		//$email->addFileByURL("http://bsf.filelogix.net/test.pdf","test.pdf");
								  		$email->send();				
				}
				
				$this->view="login";
				return true;
			}

//	    require_once('/var/www/html/lib/recaptchalib.php');
//	    $publickey = "6Lc6tecSAAAAALevgROIwALgd4yT01iTrEDfqEuy"; 
//	    $this->vars["captcha"] = recaptcha_get_html($publickey);

		$this->view="forgot";
		
		return true;		  
		  

	}		

	public function password($params) {

	  	$users = new \users($this->db);

		$this->vars["emailAddress"] = $_POST["emailAddress"];
		
		if (isset($params[2])) {
			$this->vars["activationCode"] = $params[2];
			$this->vars["activationKey"] = $params[3];
		}
		else {
			$this->vars["activationCode"] = $_POST["activationCode"];
			$this->vars["activationKey"] = $_POST["activationKey"];
		}
		
		$validID = $this->isValid($this->vars["activationCode"], $this->vars["activationKey"]);
				
		if ($validID) {
			
			if ((strlen($_POST["password"]) > 5))  {
			
				$username = $users->password($validID, $_POST["password"]);
				if ($username) {
	
					$_POST["username"] = $username;
	
					error_log("User Reset.  Logging In Automatically...");
	
					return $this->go($params);
		
					return true;
				}
				else {
					$this->view="password";
					$this->vars["alertError"]=true;
					$this->vars["errorMsg"]="An error occurred. Please Try Again.";
					if (($_POST["emailAddress"] != "") and (strlen($_POST["password"]) < 6)) {
						$this->vars["errorMsg"]="Your password is too short.";				
					}
					
					return true;
				}
			}
			else {
					$this->view="password";
					$this->vars["alertError"]=true;
					$this->vars["errorMsg"]="The passwords do not match.";
			}
		}
		
		else {
			$this->view="login";
			$this->vars["alertError"]=true;
			$this->vars["errorMsg"]="Unable to set password.";		
		}
		
		return true;		  
		  	  
	}

	public function reset($params) {

	  	$users = new \users($this->db);

		$this->vars["emailAddress"] = $_POST["emailAddress"];
		
		if ($params[2]) {
			$this->vars["resetCode"] = $params[2];
		}
		else {
			$this->vars["resetCode"] = $_POST["resetCode"];
		}
				
		if ($_POST["emailAddress"] != "") {
			
			if ((strlen($_POST["password"]) > 5))  {
			
				$username = $users->resetWithActivationCode($_POST["emailAddress"], $_POST["password"], $_POST["resetCode"]);
				if ($username) {
	
					$_POST["username"] = $username;
	
					error_log("User Reset.  Logging In Automatically...");
	
					return $this->go($params);
		
					return true;
				}
				else {
					$this->view="reset";
					$this->vars["alertError"]=true;
					$this->vars["errorMsg"]="An error occurred. Please Try Again.";
					if (($_POST["emailAddress"] != "") and (strlen($_POST["password"]) < 6)) {
						$this->vars["errorMsg"]="Your password is too short.";				
					}
					
					return true;
				}
			}
			else {
					$this->view="reset";
					$this->vars["alertError"]=true;
					$this->vars["errorMsg"]="The passwords do not match.";
			}
		}

		$this->view="reset";
		
		return true;		  
		  	  
	}

	public function register($params) {
	  
	  	error_log("Signing up new user... " . $_POST["username"]);

	  	$users = new \users($this->db);
	  	$customer = new \customer($this->db);
	  	
	  	$this->vars["emailAddress"] = $_POST["emailAddress"];
	  	$this->vars["firstName"] = $_POST["firstName"];
	  	$this->vars["lastName"] = $_POST["lastName"];
	  	$this->vars["organization"] = $_POST["organization"];
	  	$this->vars["phoneNumber"] = $_POST["phoneNumber"];
	  	$this->vars["address"] = $_POST["address"];

		$random = new \random(6,6);
		$randomStr = $random->token(6);

		if (($_POST["emailAddress"] != "") and ($_POST["firstName"] != "") and ($_POST["lastName"] != "")) {

			$this->auth->logout();
			$userID = abs($users->emailExists($_POST["emailAddress"]));
			if ($userID) {
									
				if ($users->isPending($_POST["emailAddress"])) {
	
					if (! $customer->exists(array("name"=>$_POST["organization"]))) {
						$customerID = $customer->addCustomer(array("userID"=>$userID, "emailAddress"=>$_POST["emailAddress"], "firstName"=>$_POST["firstName"], "lastName"=>$_POST["lastName"], "name"=>$_POST["organization"], "phoneNumber"=>$_POST["phoneNumber"], "address"=>$_POST["address"], "customerKey"=>$randomStr));				
					}
					else {
						$cust = $customer->getCustomerByName($_POST["organization"]);
						$customerID = $cust["id"];
						if ($customer->isActive($customerID)) {
							$this->view="register";
							$this->vars["alertError"]=true;
							$this->vars["errorMsg"]="A customer by this name is already active.";
							$this->vars["signUpHide"]="";
						}
					}
					
					if ($customerID > 0) {
						$userID = $users->resignup($userID, $_POST["emailAddress"], $_POST["firstName"], $_POST["lastName"], $_POST["organization"], $_POST["phoneNumber"]);

						$user = $users->getUserByID($userID);
error_log("User: $userID " . print_r($user, true));						
						$this->view="password";
						$this->vars["activationCode"] = $user["activationCode"]; 
						$this->vars["activationKey"] = $user["userKey"]; 
						$this->vars["emailAddress"] = $user["emailAddress"]; 
						$this->vars["showEmailAddress"] = true; 
						$this->vars["alertSuccess"]=true;
						$this->vars["successMsg"]="Thank You! A new customer account has been added.";
						$this->vars["signUpHide"]="hide";
					
						return true;
					}
					else {
						$this->view="register";
						$this->vars["alertError"]=true;
						$this->vars["errorMsg"]="A customer account is being created.";
						$this->vars["signUpHide"]="";					
					}
				}
				else {
					$this->view="register";
					$this->vars["alertError"]=true;
					$this->vars["errorMsg"]="That email address has already been used.";
					$this->vars["signUpHide"]="";
				}
			}
			else {
				if ($_POST["organization"] == "") {
					$this->view="register";
					$this->vars["alertError"]=true;
					$this->vars["errorMsg"]="Please let us know which organization you represent.";
					$this->vars["signUpHide"]="";					
				}
				else if ($_POST["phoneNumber"] == "") {
					$this->view="register";
					$this->vars["alertError"]=true;
					$this->vars["errorMsg"]="Please share a phone number we can use to contact you.";
					$this->vars["signUpHide"]="";										
				}
				else {
					$userID = $users->signup($_POST["emailAddress"], $_POST["firstName"], $_POST["lastName"], $_POST["organization"], $_POST["phoneNumber"]);
					$customerID = $customer->addCustomer(array("userID"=>$userID, "emailAddress"=>$_POST["emailAddress"], "firstName"=>$_POST["firstName"], "lastName"=>$_POST["lastName"], "name"=>$_POST["organization"], "phoneNumber"=>$_POST["phoneNumber"], "address"=>$_POST["address"], "customerKey"=>$randomStr));
					if ($customerID > 0) {
						
						$user = $users->getUserByID($userID);
						
						$this->view="password";
						$this->vars["activationCode"] = $user["activationCode"]; 
						$this->vars["activationKey"] = $user["userKey"]; 
						$this->vars["emailAddress"] = $user["emailAddress"]; 
						$this->vars["showEmailAddress"] = true; 
						$this->vars["alertSuccess"]=true;
						$this->vars["successMsg"]="Thank You! A new customer account has been added.";
					}
					else {
						$this->view="register";
						$this->vars["alertSuccess"]=true;
						$this->vars["successMsg"]="Thank You! Your request is being processed.";
						$this->vars["signUpHide"]="hide";						
					}
				}
				return true;
			}
		}
		
		else {
			if ($_POST["submit"]) {
				$this->vars["alertError"]=true;
				$this->vars["errorMsg"]="Please answer all of the fields.";
			}							
		}

		$this->view="register";
		
		return true;		   
	  
	}
	
	public function data() {
		
		return $this->vars;
	}
}
?>